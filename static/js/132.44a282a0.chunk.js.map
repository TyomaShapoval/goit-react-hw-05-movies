{"version":3,"file":"static/js/132.44a282a0.chunk.js","mappings":"qRAEaA,EAAUC,EAAAA,GAAAA,IAAH,qHAOPC,EAAaD,EAAAA,GAAAA,GAAH,wFAMVE,EAAWF,EAAAA,GAAAA,GAAH,yHAQRG,EAAeH,EAAAA,GAAAA,GAAH,gIAOZI,EAAWJ,EAAAA,GAAAA,IAAH,kEAKRK,EAAWL,EAAAA,GAAAA,GAAH,gDAIRM,EAAaN,EAAAA,GAAAA,EAAH,mN,kBCgCvB,EAzDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GAHM,gDAKdK,QAAQC,IAAR,MALc,yDAAH,qDASfH,GACD,GAAE,CAACN,KAGF,UAACR,EAAD,YACE,SAACE,EAAD,UAAY,SAAiB,IAG5BS,EAAKO,QACJ,SAACf,EAAD,UACGQ,EAAKQ,KAAI,SAAAC,GAAK,OACb,UAAChB,EAAD,CAAciB,UAAU,YAAxB,UAGGD,EAAME,cACL,gBACEC,IAAG,yCAAoCH,EAAME,cAC7CE,IAAG,UAAKJ,EAAMK,KAAX,eAGL,gBACEF,IAAG,oDACHC,IAAG,UAAKJ,EAAMK,KAAX,eAKP,UAACpB,EAAD,YACE,SAACC,EAAD,UAAWc,EAAMK,QACjB,yBAAG,cAAYL,EAAMM,kBAlBgBN,EAAMO,GADlC,OAyBjB,SAACpB,EAAD,UAAY,wDAMnB,C,6JCnEYP,EAAUC,EAAAA,GAAAA,IAAH,qHAOP2B,EAAe3B,EAAAA,GAAAA,GAAH,wFAMZ4B,EAAa5B,EAAAA,GAAAA,GAAH,yHAQV6B,EAAiB7B,EAAAA,GAAAA,GAAH,sFAKd8B,EAAS9B,EAAAA,GAAAA,GAAH,yFAMN+B,EAAS/B,EAAAA,GAAAA,EAAH,6CAINgC,EAAgBhC,EAAAA,GAAAA,EAAH,mN,kBCc1B,EAtCgB,WACd,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOwB,EAAP,KAAgBC,EAAhB,KAeA,OAbAtB,EAAAA,EAAAA,YAAU,WACR,IAAMuB,EAAY,mCAAG,gHAESC,EAAAA,EAAAA,IAAkB7B,GAF3B,gBAET8B,EAFS,EAETA,QACRH,EAAWG,GAHM,gDAKjBtB,QAAQC,IAAR,MALiB,yDAAH,qDASlBmB,GACD,GAAE,CAAC5B,KAGF,UAACR,EAAD,YACE,SAAC4B,EAAD,UAAc,YAEbM,EAAQhB,QACP,SAACW,EAAD,CAAYR,UAAU,oBAAtB,SACGa,EAAQf,KAAI,SAAAoB,GAAM,OACjB,UAACT,EAAD,CAAgBT,UAAU,cAA1B,WACE,UAACU,EAAD,WAAQ,WAASQ,EAAOC,WACxB,SAACR,EAAD,UAASO,EAAOE,YAF2BF,EAAOZ,GADnC,OAQrB,SAACM,EAAD,UAAe,oDAMtB,C,qIClDD,EAA0B,8BAA1B,EAA+D,2BAA/D,EAA6G,uCAA7G,EAAkK,kCAAlK,EAA8M,8BAA9M,EAAqP,6B,sDCuFrP,EA9EkB,WAAO,IAAD,YAEZzB,GAAYC,EAAAA,EAAAA,MAAZD,QACFkC,GAAWC,EAAAA,EAAAA,MACjB,GAA0CjC,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOkC,EAAP,KAAsBC,EAAtB,MAEAhC,EAAAA,EAAAA,YAAU,WAEV,IAAMiC,EAAkB,mCAAG,WAAOtC,GAAP,iGAGAuC,EAAAA,EAAAA,IAAevC,GAHf,OAGfwC,EAHe,OAKnBH,EAAiBG,GALE,gDAQrBC,IAAAA,OAAAA,QAAwB,KAAMC,SART,yDAAH,sDAYtBJ,EAAmBtC,EACtB,GAAE,CAACA,IAEF,IAAM2C,EAAYP,EAAcQ,YAAd,0CACmBR,EAAcQ,aACjD,oEAEMC,EACRT,EADQS,MAAOC,EACfV,EADeU,aAAcC,EAC7BX,EAD6BW,aAAcC,EAC3CZ,EAD2CY,SAAUC,EACrDb,EADqDa,OAG/CC,EAAc,IAAIC,KAAKL,GAEvBM,EAAYL,EAAY,WACT,GAAfA,GAAmBM,QAAQ,GADH,KAE5B,gBAEIC,EAAcC,MAAML,GACxB,UACAA,EAAYM,cAGd,OACE,UAAC,WAAD,YACI,qBAAS3C,UAAW4C,EAApB,WACF,SAAC,KAAD,CAAM5C,UAAW4C,EAAWC,GAAE,iBAAExB,QAAF,IAAEA,GAAF,UAAEA,EAAUyB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,OAEvD,iBAAK/C,UAAW4C,EAAhB,WACA,gBAAKI,MAAO,CACNC,MAAO,SACR/C,IAAK4B,EAAW3B,IAAI,YACvB,iBAAKH,UAAW4C,EAAhB,WACA,iCAAKZ,QAAL,IAAKA,EAAAA,EAAS,UAAU,KAAGS,EAAY,QACvC,yBAAG,eAAaF,MAChB,wBAAI,eACJ,uBAAiB,KAAbJ,EAAkB,UAAYA,IAEjCC,GAAUA,EAAOvC,OAAS,IAC3B,UAAC,WAAD,YACI,wBAAI,aACJ,uBAAIuC,EAAOtC,KAAI,SAAAoD,GAAK,OAAIA,EAAM9C,IAAV,IAAgB+C,KAAK,qBAMjD,iBAAKnD,UAAW4C,EAAhB,WACA,SAAC,KAAD,CAAM5C,UAAW4C,EAAcC,GAAG,OAAOC,MAAO,CAAEC,KAAI,iBAAE1B,QAAF,IAAEA,GAAF,UAAEA,EAAUyB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAAjF,SAAwF,UACxF,SAAC,KAAD,CAAM/C,UAAW4C,EAAcC,GAAG,UAAUC,MAAO,CAAEC,KAAI,iBAAE1B,QAAF,IAAEA,GAAF,UAAEA,EAAUyB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAApF,SAA2F,gBAE3F,+BACG1B,EAAS+B,WAAT,kBAAiCjE,EAAjC,UAAkD,SAACkE,EAAA,QAAD,IAAW,KAC7DhC,EAAS+B,WAAT,kBAAiCjE,EAAjC,aAAqD,SAACmE,EAAA,QAAD,IAAc,UAK7E,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.scss?57ee","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n  padding-right: 80px;\n  padding-left: 80px;\n  padding-bottom: 40px;\n`;\n\nexport const CastHeader = styled.h3`\n  font-size: 25px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 4 * 40px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n  list-style: none;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 20px;\n  max-width: 220px;\n`;\n\nexport const CastName = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin: 30px auto 0 auto;\n  text-align: center;\n  padding: 20px;\n  background-color: #f8f8f8;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  max-width: 500px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  NoCastText,\n  Wrapper,\n} from '../Cast/Cast.styled';\n\nimport {fetchMovieCast} from '../../sevices/api'\n\nconst Cast = () => {\n  const { movieId } = useParams(); \n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <CastHeader>Cast</CastHeader> {/* додаємо заголовок */}\n\n      {/* додаємо перевірку на наявність акторів */}\n      {cast.length ? (\n        <CastList>\n          {cast.map(actor => (\n            <CastListItem className=\"cast-card\" key={actor.id}>\n\n              {/* додаємо перевірку на наявність фото */}\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={`${actor.name} profile`}\n                />\n              ) : (\n                <img\n                  src={`https://via.placeholder.com/200x300?text=No+Image`}\n                  alt={`${actor.name} profile`}\n                />\n              )}\n\n              {/* додаємо інформацію про актора */}\n              <CastInfo>\n                <CastName>{actor.name}</CastName>\n                <p>Character: {actor.character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCastText>\n          We don't have any information about the cast yet.\n        </NoCastText>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n  padding-right: 40px;\n  padding-left: 40px;\n  padding-bottom: 40px;\n`;\n\nexport const ReviewHeader = styled.h3`\n  font-size: 25px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const ReviewList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  flex-wrap: wrap;\n`;\n\nexport const ReviewListItem = styled.li`\n  padding-bottom: 10px;\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const Author = styled.h4`\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const Review = styled.p`\n  line-height: 1.3;\n`;\n\nexport const NoReviewsText = styled.p`\n  margin: 30px auto 0 auto;\n  text-align: center;\n  padding: 20px;\n  background-color: #f8f8f8;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  max-width: 500px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Author,\n  NoReviewsText,\n  Review,\n  ReviewHeader,\n  ReviewList,\n  ReviewListItem,\n  Wrapper,\n} from './Reviews.styled';\n\nimport {fetchMovieReviews} from '../../sevices/api'\n\nconst Reviews = () => {\n  const { movieId } = useParams(); \n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const { results } = await fetchMovieReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <ReviewHeader>Reviews</ReviewHeader>\n\n      {reviews.length ? (\n        <ReviewList className=\"reviews-container\">\n          {reviews.map(review => (\n            <ReviewListItem className=\"review-card\" key={review.id}>\n              <Author>Author: {review.author}</Author>\n              <Review>{review.content}</Review>\n            </ReviewListItem>\n          ))}\n        </ReviewList>\n      ) : (\n        <NoReviewsText>\n          We don't have any reviews for this movie yet.\n        </NoReviewsText>\n      )}\n    </Wrapper>\n  );\n};\nexport default Reviews;\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"MovieDetails_details__aoa5J\",\"back\":\"MovieDetails_back__N47VV\",\"detailsContainer\":\"MovieDetails_detailsContainer__gEFFl\",\"textContent\":\"MovieDetails_textContent__u-3j6\",\"btnMore\":\"MovieDetails_btnMore__YQ0Ur\",\"btnCon\":\"MovieDetails_btnCon__4qeeX\"};","import React, { useEffect, useState } from 'react';\nimport { useParams, useLocation, Link } from 'react-router-dom';\n\nimport scss from \"./MovieDetails.module.scss\"\nimport Cast from \"../../components/Cast/Cast\";\nimport Reviews from '../../components/Reviews/Reviews';\nimport {fetchMovieById} from '../../sevices/api'\n\nimport Notiflix from 'notiflix';\n\nconst MovieItem = () => {\n\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [selectedMovie, setSelectedMovie] = useState({});\n\n    useEffect(() => {\n\n    const fetchSelectedMovie = async (movieId) => {\n\n        try {\n          const getRes = await fetchMovieById(movieId);\n  \n            setSelectedMovie(getRes);\n\n        } catch (error) {\n          Notiflix.Notify.failure(error.message);\n        }\n      };\n\n      fetchSelectedMovie(movieId);\n  }, [movieId]);\n\n    const posterUrl = selectedMovie.poster_path\n    ? `https://image.tmdb.org/t/p/w400/${selectedMovie.poster_path}`\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n\n    const { title, release_date, vote_average, overview, genres } =\n    selectedMovie;\n\n    const releaseDate = new Date(release_date);\n\n    const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated yet';\n\n    const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n    \n\n    return (\n      <React.Fragment>\n          <section className={scss.details}>\n        <Link className={scss.back} to={location?.state?.from ?? '/'}>\n        </Link>\n          <div className={scss.detailsContainer}>\n          <img style={{\n                width: \"300px\"\n            }} src={posterUrl} alt='POSTER'/>\n            <div className={scss.textContent}>\n            <h2>{title ?? 'Unknown'} ({releaseYear})</h2>\n            <p>User Score: {userScore}</p>\n            <h3>Overview:</h3>\n            <p>{overview === '' ? 'Unknown' : overview}</p>\n            \n            {genres && genres.length > 0 && (\n            <React.Fragment>\n                <h3>Genres:</h3>\n                <p>{genres.map(genre => genre.name).join(', ')}</p> \n             </React.Fragment>\n          )}\n            </div>\n          </div>\n        </section>\n        <div className={scss.btnCon}>\n        <Link className={scss.btnMore} to=\"cast\" state={{ from: location?.state?.from ?? '/' }}>Cast</Link>\n        <Link className={scss.btnMore} to=\"reviews\" state={{ from: location?.state?.from ?? '/' }}>Reviews</Link>\n        </div>\n        <section>\n          {location.pathname === `/movies/${movieId}/cast` ? <Cast /> : null}\n          {location.pathname === `/movies/${movieId}/reviews` ? <Reviews /> : null}\n        </section>\n        \n      </React.Fragment>\n    )\n}\n\nexport default MovieItem"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","actor","className","profile_path","src","alt","name","character","id","ReviewHeader","ReviewList","ReviewListItem","Author","Review","NoReviewsText","reviews","setReviews","fetchReviews","fetchMovieReviews","results","review","author","content","location","useLocation","selectedMovie","setSelectedMovie","fetchSelectedMovie","fetchMovieById","getRes","Notiflix","message","posterUrl","poster_path","title","release_date","vote_average","overview","genres","releaseDate","Date","userScore","toFixed","releaseYear","isNaN","getFullYear","scss","to","state","from","style","width","genre","join","pathname","Cast","Reviews"],"sourceRoot":""}